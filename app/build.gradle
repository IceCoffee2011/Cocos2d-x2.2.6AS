import org.apache.tools.ant.taskdefs.condition.Os

apply plugin: 'com.android.application'


def getNdkBuildName() {
    return 'E:/SDK/android-ndk-r10e/ndk-build.cmd'
    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        return 'E:/SDK/android-ndk-r10e/ndk-build.cmd'
    } else {
        return "/home/klob/dev/android-ndk-r10e/ndk-build"
    }
}

def getNdkBuildFullPath() {
    // return "/home/klob/dev/android-ndk-r10e/ndk-build"
    // we allow to provide full path to ndk-build tool
    if (hasProperty('ndk.command')) {
        return property('ndk.command')
    }

    // or just a path to the containing directiry
    if (hasProperty('ndk.path')) {
        def path = property('ndk.path')
        if (!path.endsWith(File.separator)) {
            path += File.separator
        }
        println "path"+path
        return path + getNdkBuildName()
    }
    // if none of above is provided, we assume ndk-build is already in $PATH

    return getNdkBuildName()
}

def makeNdkTasks(String name) {
    println name
    task "ndk_build_$name"(type: Exec) {
        inputs.file("jni/$name")
        outputs.dir("$buildDir/$name")
        println "getDo"+getNdkBuildFullPath()
        commandLine getNdkBuildFullPath(),
                'NDK_APPLICATION_MK=../Application.mk',
                'NDK_OUT=' + temporaryDir,
                "NDK_LIBS_OUT=$buildDir/$name",
                '-C', file("jni/$name").absolutePath,
                '--jobs', '8'
    }

    task "ndk_clean_$name"(type: Exec) {
        //  println getNdkBuildFullPath()
        ignoreExitValue true
        commandLine getNdkBuildFullPath(),
                'NDK_APPLICATION_MK=../Application.mk',
                'NDK_OUT=' + temporaryDir,
                "NDK_LIBS_OUT=$buildDir/$name",
                '-C', file("jni/$name").absolutePath,
                'clean'
    }

    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn "ndk_build_$name"
    }
    clean.dependsOn "ndk_clean_$name"
}
android {
    compileSdkVersion 21
    buildToolsVersion "22.0.1"

    defaultConfig {
        applicationId "com.example.helloexample"
        minSdkVersion 10
        targetSdkVersion 21
        versionCode 1
        versionName "1.0"
    }

    sourceSets.main {
        java.srcDir "src"
        res.srcDir "res"
        jniLibs.srcDir "libs"
        manifest.srcFile "AndroidManifest.xml"
        assets.srcDir "assets"
    }

    signingConfigs {

       release {
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                storeFile file(RELEASE_STORE_FILE)
                storePassword RELEASE_STORE_PASSWORD
                keyAlias RELEASE_KEY_ALIAS
                keyPassword RELEASE_KEY_PASSWORD
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (project.hasProperty("RELEASE_STORE_FILE")) {
                signingConfig signingConfigs.release
            }
        }
    }

    def ndkLibs = [['cocos2dcpp', []],]
    sourceSets {
        main {
            jni.srcDirs = []
            jniLibs.srcDirs = ndkLibs.collect { "$buildDir/${it[0]}" }
        }

    }

    makeNdkTasks 'cocos2dcpp'
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
 //   compile project(':libcocos2dx')
    compile files('lib/libcocos2dx.jar')
}
